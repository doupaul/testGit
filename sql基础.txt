命令结束 ; 或 \g
用 'help;' 或 '\h' 获取帮助，help select;获取 

SHOW 数据库; 显示数据库 
USE 数据库;  选择数据库

SHOW 数据表; 显示数据表

SHOW COLUMNS FROM 数据表;  
DESCRIBE 数据表;       显示数据表的列信息  

SELECT ( 列名[,列名,列名...] | * ) FROM 表名; 检索表中的列

SELECT DISTINCT 列名 FROM 表面;  只返回值不同的行
一个DISTINCT关键字就修饰所有列，所有列完全相同才会不被返回

SELECT 列名 FROM 表名 LIMIT [开始行(默认从0开始),]行数;  限制检索结果

完全限定的列名：表名.列名
完全限定的表名：数据库名.表名

ORDER BY子句使用的列将是为显示所选的列，但也可以为非显示所选的列

SELECT 列名 FROM 表名 ORDER BY 列名1 [DESC | ASC]; 单列排序：列名1以字母序排序（默认升序）

SELECT 列名 FROM 表名 ORDER BY 列名1 [DESC | ASC],列名2 [DESC | ASC],...; 多列排序：多列以字母序排序（默认升序），列名2进行排序需要保证多行的列名1相同，否则不进行排序

指定排序方向：默认升序
降序：列名 DESC
多列排序都为降序 需要排序的每个列名后都加DESC

SELECT 列名 FROM 表名 ORDER BY 列名 [DESC | ASC] LIMIT 行数;  组合使用选出最高或最低的几行，有些数据库用TOP关键字来完成

SELECT 列名	FROM 表名 WHERE 子句 [ORDER BY 列名]; 过滤数据
 
 操作符
 = 等于  <> != 不等于
 <小于 <=小于等于 >大于 >=大于等于
 BETWEEM .. AND .. 范围值检查
 IS NULL
 组合 WHERE子句  
 AND  OR  操作符（AND优先级比OR高），用括号分组避免歧义
 IN (..,..,..) 指定条件，每个条件都进行匹配

 为什么要使用IN操作符？其优点具体如下。
 在使用长的合法选项清单时， IN操作符的语法更清楚且更直观。
 在使用IN时，计算的次序更容易管理（因为使用的操作符更少）。
 IN操作符一般比OR操作符清单执行更快。
 IN的最大优点是可以包含其他SELECT语句，使得能够更动态地建立WHERE子句。第14章将对此进行详细介绍。

NOT MySQL支持使用 NOT 对IN、BETWEEN和EXISTS子句取反



汇总（聚合）函数
AVG(列名) AS 别名 ：必须给出列名，忽略列值为NULL的行，获取多列平均值需要使用多个AVG()函数

COUNT(*) AS 别名：对表中行的数目进行计数， 不管表列中包含的是空值（NULL）还是非空值。
COUNT(column) AS 别名：对特定列中具有值的行进行计数，忽略NULL值

MAX(列名) AS 别名：必须给出列名，忽略列值为NULL的行，返回指定列中的最大值，一般用来找出最大的数值或日期值，但MySQL允许将它用来返回任意列中的最大值，包括返回文本列中的最大值。在用于文本数据时，如果数据按相应的列排序，则MAX()返回最后一行。
MIN(列名) AS 别名：功能正好与MAX()功能相反，它返回指定列的最小值

SUM(列名) AS 别名：用来返回指定列值的和（总计），忽略列值为NULL的行
SUM()也可以用来合计计算值：
	SELECT SUM(item_price*quantity) AS total_price FROM orderitems WHERE order_num = 20005;
	函数SUM(item_price*quantity)返回订单中所有物品价钱之和， WHERE子句同样保证只统计某个物品订单中的物品。
	利用标准的算术操作符，所有聚集函数都可用来执行多个列上的计算。

MySQL5及后期版本聚合函数可用DISTINCT参数：
AVG(DISTINCT 列名) AS 别名：平均值只考虑各个不同的值
COUNT(DISTINCT 列名) AS 别名：只对不同的值进行计数，不能用于COUNT(*)
SUM(DISTINCT 列名) AS 别名
MAX和MIN使用DISTINCT参数没意义


分组数据
在具体使用GROUP BY子句前，需要知道一些重要的规定：
 1.GROUP BY子句可以包含任意数目的列。这使得能对分组进行 嵌套，为数据分组提供更细致的控制。
 2.如果在GROUP BY子句中嵌套了分组，数据将在最后规定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算（所以不能从个别的列取回数据）。
   3.GROUP BY子句中列出的每个列都必须是检索列或有效的表达式（但不能是聚集函数）。
  	如果在SELECT中使用 表达式，则必须在GROUP BY子句中指定相同的表达式，不能使用别名。
 4.除聚集计算语句外，SELECT语句中的 每个列 都必须在GROUP BY子句中给出（只有聚合函数的话，GROUP BY子句给出列，就根据该列分组？）。
 5.如果分组列中具有NULL值，则NULL将作为一个分组返回。如果列中有多行NULL值，它们将分为一组。
 6.GROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前（可以和排序结合使得结果更清晰）。

WHERE过滤行，而HAVING过滤分组，HAVING支持所有WHERE操作符
HAVING和WHERE的差别：
这里有另一种理解方法，WHERE在数据分组前进行过滤， HAVING在数据分组后进行过滤。
这是一个重要的区别， WHERE排除的行不包括在分组中。这可能会改变计算值，从而影响HAVING子句中基于这些值过滤掉的分组。

SELECT子句及其顺序
子 句             说 明                是否必须使用
SELECT         要返回的列或表达式          是
FROM           从中检索数据的表     仅在从表选择数据时使用
WHERE             行级过滤                 否
GROUP BY          分组说明         仅在按组计算聚集时使用
HAVING            组级过滤                 否
ORDER BY       输出排序顺序                否
LIMIT            要检索的行数              否

子查询（ subquery） 
1.利用子查询进行过滤
	列出订购物品TNT2的所有客户 （也可用三表内部联结解决）
	(1) 检索包含物品TNT2的所有订单的编号。
		SELECT order_num
		FROM orderitmes
		WHERE prod_id = 'TNT2';
		结果：order_num 20005 20007
	(2) 检索具有前一步骤列出的订单编号的所有客户的ID。
		SELECT cust_id
		FROM orders
		WHERE order_num IN (20005,20007);
		结果：cust_id 10001 10004
	(3) 检索前一步骤返回的所有客户ID的客户信息。
		SELECT cust_name,cust_contact
		FROM customers
		WHERE cust_id IN (10001,10004);

		SELECT cust_name,cust_contact
		FROM customers
		WHERE cust_id IN (SELECT cust_id
						  FROM orders
						  WHERE order_num IN (SELECT order_num
											  FROM orderitmes
											  WHERE prod_id = 'TNT2'));
	在WHERE子句中使用子查询（如这里所示），应该保证SELECT语句具有与WHERE子句中相同数目的列。
	通常，子查询将返回单个列并且与单个列匹配，但如果需要也可以使用多个列。

2.作为计算字段使用子查询
	显示customers表中每个客户的订单总数。
	(1) 从customers表中检索客户列表。
		SELECT COUNT(*) AS orders
		FROM orders
		WHERE cust_id = 10001;
	(2) 对于检索出的每个客户，统计其在orders表中的订单数目。
		SELECT cust_name,cust_state,
			   (SELECT COUNT(*)
			   	FROM orders
			   	WHERE orders.cust_id = customers.cust_id) AS orders       //完全限定列名
		FROM customers
		ORDER BY cust_name;
		该子查询对检索出的每个客户执行一次。

相关子查询（correlated subquery） 涉及外部查询的子查询——使用完全限定列名
任何时候只要列名可能有多义性，就必须使用这种语法（表名和列名由一个句点分隔）。

 使用 列别名(也称为导出列（ derived column）)
 1.计算字段（从数据库中检索后，经转换、计算或格式化的数据）
 	SELECT prod_id,
 		   quantity,
 		   item_price,
 		   quantity*item_price AS expanded_price
 	FROM orderitems
 	WHERE order_num = 20005;
 2.拼接字段
 	SELECT Concat(RTrim(vend_name),'(',RTrim(vend_country),')') AS vend_title
 	FROM vendors
 	ORDER BY vend_name;

使用 表别名
1.多表联结时缩短SQL语句；允许在单条SELECT语句中多次使用相同的表。

联结：
1.内部（等值）联结
  SELECT 列名 FROM A,B WHERE A.id = B.id;（联结多表）
  SELECT 列名 FROM A INNER JOIN B ON A.id = B.id;
2.自联结：联结的两表为同一个表
  假如你发现某物品（其ID为DTNTR）存在问题，因此想知道生产该物品的供应商生产的其他物品是否也存在这些问题。
  （1）找到生产ID为DTNTR的物品的供应商
  （2）找出这个供应商生产的其他物品
   子查询解决：
   SELECT prod_id,prod_name
   FROM products
   WHERE vend_id = (SELECT vend_id
   					FROM products
   					WHERE prod_id = 'DTNTR');
   自联结解决：
   SELECT p1.prod_id,p1.prod_name
   FROM products AS p1 , products AS p2
   WHERE p1.vend_id = p2.vend_id
     AND p2.prod_id = 'DTNTR';
3.自然联结
  标准的联结（内部联结）返回所有数据，甚至相同的列多次出现。自然联结排除多次出现，使每个列只返回一次。
  自然联结是这样一种联结，其中你只能选择那些唯一的列。
  这一般是通过对第一个表使用通配符（SELECT *），对所有其他表的列使用明确的子集来完成的。
  SELECT c.*,o.order_num,o.order_date,
  		 oi.prod_id,oi.quantity,oi.item_price
  FROM customer AS c,order AS o,orderitems AS oi
  WHERE c.cust_id = o.cust_id
  	AND oi.order_num = o.order_num
  	AND prod_id = 'FB';
4.外部联结：包含了 那些在相关表中没有关联行的行 的联结
  检索所有客户，包括那些没有订单的客户：
  SELECT c.cust_id,o.order_num
  FROM customers AS c LEFT OUTER JOIN orders AS o     //从FROM子句的左边表（customers表）中选择所有行
  ON c.cust_id = o. cust_id;
  结果会出现 一条 cust_id 10002 order_num NULL的记录

  使用OUTER JOIN语法时，必须使用RIGHT或LEFT关键字指定包括其所有行的表
  （RIGHT指出的是OUTER JOIN右边的表，而LEFT指出的是OUTER JOIN左边的表）
  左外部联结可通过颠倒FROM或WHERE子句中表的顺序转换为右外部联结。
  因此，两种类型的外部联结可互换使用，而究竟使用哪一种纯粹是根据方便而定。

	使用带聚集函数的联结
	  SELECT c.cust_id,c.cust_name
	  		 COUNT(o.order_num) AS num_ord
	  FROM customers AS c INNER JOIN orders AS o     
	  ON c.cust_id = o. cust_id
	  GROUP BY c.cust_id;

	  SELECT c.cust_id,c.cust_name
	  		 COUNT(o.order_num) AS num_ord
	  FROM customers AS c LEFT OUTER JOIN orders AS o     
	  ON c.cust_id = o. cust_id
	  GROUP BY c.cust_id;

组合查询通常称为并（ union） 或复合查询（compound query）
   有两种基本情况，其中需要使用组合查询：
 1.在单个查询中从不同的表返回类似结构的数据；
 2.对单个表执行多个查询，按单个查询返回数据。
使用：给出每条SELECT语句，在各条语句之间放上关键字UNION

多数情况下，组合相同表的两个查询完成的工作与具有多个WHERE子句条件的单条查询完成的工作相同。
	UNION的返回结果会去掉重复的行
	SELECT vend_id,prod_id,prod_price
	FROM products
	WHERE prod_price <= 5
	UNION
	SELECT vend_id,prod_id,prod_price
	FROM products
	WHERE vend_id IN (1001,1002);
	使用 UNION ALL会保留重复的行
	
	等价于
	SELECT vend_id,prod_id,prod_price
	FROM products
	WHERE prod_price <= 5
	OR vend_id IN (1001,1002);
在这个简单的例子中，使用UNION可能比使用WHERE子句更为复杂。
但对于更复杂的过滤条件，或者从多个表（而不是单个表）中检索数据的情形，使用UNION可能会使处理更简单。

规则：
    1.UNION必须由两条或两条以上的SELECT语句组成，语句之间用关键字UNION分隔
    （因此，如果组合4条SELECT语句，将要使用3个UNION关键字）。
  2.UNION中的每个查询必须包含相同的列、表达式或聚集函数（不过各个列不需要以相同的次序列出）。
  3.列数据类型必须兼容：类型不必完全相同，但必须是DBMS可以隐含地转换的类型（例如，不同的数值类型或不同的日期类型）。

组合结果的排序：ORDER BY子句放在最后的SELECT语句之后且不允许使用多条ORDER BY子句

全文本搜索
两个最常使用的引擎MyISAM和InnoDB，前者支持全文本搜索，而后者不支持
0.全文本搜索的使用说明
	1.在索引全文本数据时，短词被忽略且从索引中排除。
	  短词定义为那些具有3个或3个以下字符的词（如果需要，这个数目可以更改）。
	2.MySQL带有一个内建的非用词（stopword）列表，这些词在索引全文本数据时总是被忽略。
	  如果需要，可以覆盖这个列表（请参阅MySQL文档以了解如何完成此工作）。
	3.许多词出现的频率很高，搜索它们没有用处（返回太多的结果）。
		因此，MySQL规定了一条50%规则，如果一个词出现在50%以上的行中，则将它作为一个非用词忽略。 
		50%规则不用于IN BOOLEANMODE。
	4.如果表中的行数少于3行，则全文本搜索不返回结果（因为每个词
	或者不出现，或者至少出现在50%的行中）。
	5.忽略词中的单引号。例如， don't索引为dont。
	6.不具有词分隔符（包括日语和汉语）的语言不能恰当地返回全文
	本搜索结果。
	7.如前所述，仅在MyISAM数据库引擎中支持全文本搜索。

1.启用 全文本搜索 支持
CREATE TABLE  productnotes(
	note_id int NOT NULL AUTO_INCREMENT,
	prod_id int NOT NULL,
	note_date datetime NOT NULL,
	note_text text NULL,
	PRIMARY KEY(note_id),
	FULLTEXT(note_text)
) ENGINE = MyISAM
为了进行全文本搜索，MySQL根据子句FULLTEXT(note_text)的指示对它进行索引。
这里的FULLTEXT索引单个列，如果需要也可以指定多个列。

1.在定义之后， MySQL自动维护该索引。在增加、更新或删除行时，索引随之自动更新。
2.可以在创建表时指定FULLTEXT，或者在稍后指定（在这种情况下所有已有数据必须立即索引）。
3.如果正在导入数据到一个新表，此时不应该启用FULLTEXT索引。
  应该首先导入所有数据，然后再修改表， 定义FULLTEXT。 
  这样有助于更快地导入数据（而且使索引数据的总时间小于在导入每行时分别进行索引所需的总时间）。

2.进行 全文本搜索
	在索引之后，使用两个函数Match()和Against()执行全文本搜索。
其中Match()指定被搜索的列， Against()指定要使用的搜索表达式。
SELECT note_text 
FROM productnotes
WHERE Match(note_text) Against('rabbit'); 
(使用 note_text LIKE '%rabbit%'也可以完成，但排序不一样；
全文搜索返回的排序根据词出现的先后顺序，先出现排位等级高，先返回)
传递给Match()的值必须与FULLTEXT()定义中的相同。如果指定多个列，则必须列出它们（而且次序正确）。
Match(note_text)指示MySQL针对指定的列进行搜索， Against('rabbit')指定词rabbit作为搜索文本。
由于有两行包含词rabbit，这两个行被返回。
除非使用BINARY方式，否则全文本搜索不区分大小写。

3.使用查询扩展
 你想找出所有提到anvils的注释。
 只有一个注释包含词anvils，但你还想找出可能与你的搜索有关的所有其他行，即使它们不包含词

 这也是查询扩展的一项任务。在使用查询扩展时， MySQL对数据和索引进行两遍扫描来完成搜索：
 首先，进行一个基本的全文本搜索，找出与搜索条件匹配的所有行；
 其次， MySQL检查这些匹配行并选择所有有用的词。
 再其次， MySQL再次进行全文本搜索，这次不仅使用原来的条件，而且还使用所有有用的词。
 利用查询扩展，能找出可能相关的结果，即使它们并不精确包含所查找的词。

SELECT note_text 
FROM productnotes
WHERE Match(note_text) Against('rabbit' WITH QUERY EXPANSION); 

第二行与anvils无关，但因为它包含第一行中的两个词（customer和recommend），所以也被检索出来。
第3行也包含这两个相同的词，但它们在文本中的位置更靠后且分开得更远，因此也包含这一行，但等级为第三。

4.布尔搜索（即使没有FULLTEXT索引也可以使用，性能将随着数据量的增加而降低）
在布尔方式中，不按等级值降序排序返回的行
细节：  
  要匹配的词；
 	  要排斥的词（如果某行包含这个词，则不返回该行，即使它包含其他指定的词也是如此）；
    排列提示（指定某些词比其他词更重要，更重要的词等级更高）；
    表达式分组；
    另外一些内容。
布尔操作符 说 明
+ 包含，词必须存在
- 排除，词必须不出现
> 包含，而且增加等级值
< 包含，且减少等级值
() 把词组成子表达式（允许这些子表达式作为一个组被包含、排除、排列等）
~ 取消一个词的排序值
* 词尾的通配符
"" 定义一个短语（与单个词的列表不一样，它匹配整个短语以便包含或排除这个短语）

匹配包含heavy但不包含任意以rope开始的词的行:
SELECT note_text 
FROM productnotes
WHERE Match(note_text) Against('heavy -rope*' IN BOOLEAN MODE); 

匹配包含rabbit或bait的行：
'rabbit bait' IN BOOLEAN MODE

匹配包含词rabbit和bait的行：
'+rabbit +bait' IN BOOLEAN MODE
匹配包含词rabbit和bait的行,降低后者的等级：
'+rabbit +(<bait)' IN BOOLEAN MODE
匹配包含词rabbit和bait的行,增加前者的等级，降低后者的等级：
'>rabbit <bait' IN BOOLEAN MODE

匹配短语rabbit bait而不是匹配两个词rabbit和bait：
'"rabbit bait"' IN BOOLEAN MODE


INSERT数据插入
 1.插入完整的行；
	INSERT INTO 表名
	VALUES(各列的值);
	如果某个列没有值（如上面的cust_contact和cust_email列），应该使用NULL值（假定表允许对该列指定空值）。
	各个列必须以它们在表定义中出现的次序填充。
 2.插入行的一部分；
    INSERT INTO 表名(部分列名)
    VALUES(对应的列值);
    省略的列必须满足:该列定义为允许NULL值（无值或空值）;在表定义中给出默认值
    
    如需优先检索，然后插入语句，可以使用 INSERT LOW_PRIORITY INTO语句
 3.插入多行；
 	INSERT INTO 表名(部分列名)
    VALUES(对应的列值集合1),
          (对应的列值集合2);
 4.插入某些查询的结果:将一条SELECT语句的结果插入表中
 	INSERT INTO 表名(部分列名)
 	SELECT (相应个数的列名且对应数据类型相同)
 	FROM 表名
 	[WHERE 子句];

UPDATE、DELETE语句可以使用子查询，使得能用SELECT语句检索出的数据更新列数据

UPDATE 表名
SET 列名1 = 表达式/值[,列名2 = 表达式/值 ...]
[WHERE 子句];
部分删除：UPDATE使某列值为NULL

整行删除：如无WHERE子句，删除所有行
DELETE FROM 表名
[WHERE 子句];

如果想从表中删除所有行，不要使用DELETE。
可使用TRUNCATE TABLE语句，它完成相同的工作，但速度更
快（ TRUNCATE实际是删除原来的表并重新创建一个表，而不
是逐行删除表中的数据）。

表
	1.创建表
	  CREATE TABLE 表名(
	  	列名 数据类型 [列级完整性数据约束条件：UNSIGNED、ZEROFILL、[NOT] NULL、AUTO_INCREMENT、
	  				   DEFAULT 常量、COMMENT ''、UNIQUE、PRIMATY KEY],
	  	表级完整性约束条件：主键PRIMARY KEY(,)、外键FOREIGN KEY() REFERENCE 外表(主键)、唯一性约束UNIQUE()、列约束CHECK(判断表达式)
	  ) ENGINE=[InooDB | MyISAM | MEMORY ...],.... ;

	  表级约束可以给约束起名字(方便以后通过这个名字来删除这个约束)
	  CONSTRAINT 约束名 约束

	  返回最后一个AUTO_INCREMENT值: SELECT last_insert_id();

	2.修改表

	   数据库表的更改不能撤销，使用ALTER TABLE要极为小心，应该在进行改动前做一个完整的备份（模式和数据的备份）。

	  比较有意义的操作是定义外键（约束）：
	  ALTER TABLE 表名
	  ADD CONSTRAINT 约束名 FOREIGN KEY(列名) REFERENCES 外表(主键),
	  ....;
	  单个表进行多个更改，可以使用单条ALTER TABLE语句，每个更改用逗号分隔
	  DROP 列名
	  MODIFY 列名 数据类型 列级完整性约束

	  复杂的表结构更改一般需要手动删除过程，它涉及以下步骤：
 	  1.用新的列布局创建一个新表；
    2.使用INSERT INTO  新表(列名) SELECT语句从旧表复制数据到新表。如果有必要，可使用转换函数和计算字段；
	  3.检验包含所需数据的新表；
	4.重命名旧表（如果确定，可以删除它）；
	5.用旧表原来的名字重命名新表；
	6.根据需要，重新创建触发器、存储过程、索引和外键。

	3.删除表
	  DROP TABLE 表名;

	4.重命名表
	  RENAME TABLE 旧名 TO 新名<,旧名 TO 新名>;

视图
MySQL 5添加了对视图的支持。
视图是虚拟的表。与包含数据的表不一样，视图只包含使用时动态检索数据的查询。
视图仅仅是用来查看存储在别处的数据的一种设施。
视图本身不包含数据，因此它们返回的数据是从其他表中检索出来的。

为什么使用视图:
1.重用SQL语句。
2.简化复杂的SQL操作。在编写查询后，可以方便地重用它而不必知道它的基本查询细节。
3.使用表的组成部分而不是整个表。
4.保护数据。可以给用户授予表的特定部分的访问权限而不是整个表的访问权限。
5.更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。

在视图创建之后，可以用与表基本相同的方式利用它们。
可以对视图执行SELECT操作，过滤和排序数据，将视图联结到其他视图或表，
甚至能添加和更新数据(有限制)

规则：
与表一样，视图必须唯一命名（不能给视图取与别的视图或表相同的名字）。
对于可以创建的视图数目没有限制。
为了创建视图，必须具有足够的访问权限。这些限制通常由数据库管理人员授予。
视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造一个视图。
ORDER BY可以用在视图中，但如果从该视图检索数据SELECT中也含有ORDER BY，那么该视图中的ORDER BY将被覆盖。
视图不能索引，也不能有关联的触发器或默认值。
视图可以和表一起使用。例如，编写一条联结表和视图的SELECT语句。

1.使用视图：
	视图用CREATE VIEW语句来创建。
	使用SHOW CREATE VIEW viewname；来查看创建视图的语句。
	用DROP删除视图，其语法为DROP VIEW viewname;。
	更新视图时，可以先用DROP再用CREATE，也可以直接用CREATE ORREPLACE VIEW。
	如果要更新的视图不存在，则第2条更新语句会创建一个视图；
	如果要更新的视图存在，则第2条更新语句会替换原有视图

2.利用视图简化复杂的联结
  订购了任意产品的客户
  CREATE VIEW productcustomers AS
  SELECT cust_name,cust_contact,prod_id
  FROM customers,orders,orderitems
  WHERE customers.cust_id = orders.cust_id
  AND orderitems.order_num = orders.order_num;
  编写好后根据条件取出需要的行，SELECT语句就像对表的操作
  SELECT 列名
  FROM productcustomers
  [WHERE 子句];

3.用视图过滤不想要的数据
  CREATE VIEW customeremaillist AS
  SELECT cust_id,cust_name,cust_email
  FROM customers
  WHERE cust_email IS NOT NULL;

导出列作为视图：

4.使用视图与 计算 字段
  CREATE VIEW vendorlocations AS
  SELECT prod_id,
 		 quantity,
 		 item_price,
 		 quantity*item_price AS expanded_price
  FROM orderitems
  WHERE order_num = 20005;
5.使用视图重新格式化检索出的数据——拼接
  CREATE VIEW orderitemsexpanded AS	
  SELECT Concat(RTrim(vend_name),'(',RTrim(vend_country),')') AS vend_title
  FROM vendors
  ORDER BY vend_name;

视图定义中有以下操作，则不能进行视图的更新：
分组（使用GROUP BY和HAVING）；
联结；
子查询；
并；
聚集函数（Min()、 Count()、 Sum()等）；
DISTINCT；
导出（计算）列


存储过程:
	1.一条或多条MySQL语句的集合。可将其视为批文件，虽然它们的作用不仅限于批处理。
	2.执行：
	  CALL 存储过程;
	  CALL productpricing(@pricelow,@pricehigh,@priceaverage);   @开头的为定义的变量
	  执行名为productpricing的存储过程，它计算并返回产品的最低、最高和平均价格。
	3.创建
	  CREATE PROCEDURE productpricing()
	  BEGIN
	  	 SELECT AVG(prod_price) AS priceaverage
	  	 FROM products;
	  END;

	  CALL productpricing();
	  显示结果  priceaverage : xxxxx.xxxxxx

	  命令行中;为结束，创建存储过程会有多个;导致语句提前结束出现错误
	  利用DELIMITER暂时修改结束符号，如 DELIMITER //
	  END // 完成创建
	  然后 DELIMITER ; 恢复;结束

	  使用参数：
	  CREATE PROCEDURE productpricing(
	  	OUT pl DECIMAL(8,2),
	  	OUT ph DECIMAL(8,2),
	  	OUT pa DECIMAL(8,2)
	  )
	  BEGIN
	  	 SELECT MIN(prod_price)
	  	 INTO pl 
	  	 FROM products;
	  	 SELECT MAX(prod_price)
	  	 INTO ph 
	  	 FROM products;
	  	 SELECT AVG(prod_price)
	  	 INTO pa 
	  	 FROM products;
	  END;

	  CALL productpricing(@pricelow,@pricehigh,@priceaverage);
	  不显示结果,将结果存在3个变量

	  SELECT @pricelow,@pricehigh,@priceaverage;
	  显示变量的值（存在其中的结果）

	  关键字
	  OUT:相应的参数用来从存储过程传出一个值（返回给调用者）
	  IN:传递给存储过程
	  INOUT:对存储过程传入和传出（？）

	  关键字使用：
	  CREATE PROCEDURE ordertotal(
	  	 IN onumber INT,
	  	 OUT ototal DECIMAL(8,2)
	  )
	  BEGIN
	  	 SELECT SUM(item_price*quantity)
	  	 FROM orderitems
	  	 WHERE order_num = onumber
	  	 INTO ototal;
	  END;

	  CALL ordertotal(20005,@total);
	  SELECT @total;

  案例：包含业务规则和智能处理的存储过程：
	  业务场景：
	  	获得订单合计，但需要对合计增加营业税，不过只针对某些顾客。
	    细节：
	  	获得合计（与以前一样）；
		把营业税有条件地添加到合计；
		返回合计（带或不带税）。
	  实现： --为注释，COMMENT 为备注
	  -- NAME: ordertotal
	  -- PARAMETERS: onumber = '订单编号'
	  --             taxable = '0为不带税，1为带税'
	  --             ototal  = '订单合计变量'

	  CREATE PROCEDURE ordertotal (
	  	 IN onumber INT,
	  	 IN taxable BOOLEAN,
	  	 OUT ototal DECIMAL(8,2)
	  ) COMMENT '获取订单总结，可选的附加税'
	  BEGIN
	  	 -- 为订单总结声明变量   
	  	 DECLEAR total DECIMAL(8,2);
	  	 -- 声明税率             
	  	 DECLEAR taxrate INT DEFAULT 6;

	  	 -- 获取订单总价
	  	 SELECT SUM(item_price*quantity)
	  	 FROM orderitems
	  	 WHERE order_num = onumber
	  	 INTO ototal;

	  	 -- 判断是否带税
	  	 IF tabable THEN
	  	 	-- 加税
	  	 	SELECT total+(total/100*taxrate) INTO total;
	  	 END IF;

	  	 -- 存入输出变量
	  	 SELECT total INTO ototal;

	  END;

	  执行和获得结果
	  CALL ordertotal(20005,0,@total);
	  SELECT @total;
	4.删除和检查
	  DROP PROCEDURE [IF EXISTS] 存储过程名;
	  SHOW CREATE PROCEDURE 存储过程名;  显示创建存储过程名的CREATE语句
	  SHOW PROCEDURE STATUS 存储过程名 [LIKE 子句]; 显示（所有或者有限制的）存储过程的创建时间、由谁创建等详细信息的列表  

游标cursor
	 一个存储在MySQL服务器上的数据库查询，它不是一条SELECT语句，而是被该语句检索出来的 结果集。
	 
	 MySQL中游标只能用于存储过程（和函数）。
	 存储过程处理完成后，游标就消失（因为它局限于存储过程）。
	 1.创建游标
	 CREATE PROCEDURE processorders()
	 BEGIN
	 	DECLEAR ordernumbers CURSOR
	 	FOR
	 	SELECT order_num FROM orders;
	 END;

	 2.打开和关闭游标
	 OPEN 游标名;  处理OPEN语句时执行查询，存储检索出的数据以供浏览和滚动。
	 在一个游标关闭后，如果没有重新打开，则不能使用它。但是，使用声明过的游标不需要再次声明，用OPEN语句打开它就可以了。

	 CLOSE 游标名; CLOSE释放游标使用的所有内部内存和资源，因此在每个游标不再需要时都应该关闭。
	 如果你不明确关闭游标， MySQL将会在到达END语句时自动关闭它。

	 CREATE PROCEDURE processorders()
	 BEGIN
	    -- 声明游标
	 	DECLEAR ordernumbers CURSOR
	 	FOR
	 	SELECT order_num FROM orders;

	 	-- 打开游标
	 	OPEN ordernumbers;

	 	-- 关闭游标
	 	CLOSE ordernumbers;
	 END;

	 3.使用游标数据
	 游标被打开后，可以使用FETCH语句分别访问它的每一行。
	 访问一行后，向前移动游标中的内部行指针，可以继续检索下一行
	 1.访问一行
	 CREATE PROCEDURE processorders()
	 BEGIN
	 	-- 声明局部变量
	 	DECLEAR o INT;

	    -- 声明游标
	 	DECLEAR ordernumbers CURSOR
	 	FOR
	 	SELECT order_num FROM orders;

	 	-- 打开游标
	 	OPEN ordernumbers;

	 	-- 获取订单编号，存入变量o
	 	FETCH ordernumbers INTO o;

	 	-- 关闭游标
	 	CLOSE ordernumbers;
	 END;

	 2.循环访问所有行
	 CREATE PROCEDURE processorders()
	 BEGIN
	 	-- 声明局部变量
	 	DECLEAR o INT;
	 	DECLEAR done BOOLEAN DEFAULT 0;

	    -- 声明游标
	 	DECLEAR ordernumbers CURSOR
	 	FOR
	 	SELECT order_num FROM orders;

	 	-- 声明CONTINUE HANDLER  SQLSTATE '02000'是一个未找到条件
	 	DELEAR CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;

	 	-- 打开游标
	 	OPEN ordernumbers;

	 	-- 开始循环访问所有行
	 	REPEAT

	 		-- 获取订单编号，存入变量o
	 		FETCH ordernumbers INTO o;

	 	-- 结束循环	
	 	UNTILE done END REPEAT;

	 	-- 关闭游标
	 	CLOSE ordernumbers;
	 END;
	
	 3.实现功能
	 CREATE PROCEDURE processorders()
	 BEGIN
	 	-- 声明局部变量
	 	DECLEAR o INT;
	 	DECLEAR done BOOLEAN DEFAULT 0;
	 	DECLEAR t DECIMAL(8,2);

	 	-- 创建用于存储结果的表
	 	CREATE TABLE IF NOT EXISTS ordertotals(
	 		order_num INT,
	 		total DECIMAL(8,2)
	 	);


	    -- 声明游标
	 	DECLEAR ordernumbers CURSOR
	 	FOR
	 	SELECT order_num FROM orders;

	 	-- 声明CONTINUE HANDLER  SQLSTATE '02000'是一个未找到条件
	 	DELEAR CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1;

	 	-- 打开游标
	 	OPEN ordernumbers;

	 	-- 开始循环访问所有行
	 	REPEAT

	 		-- 获取订单编号，存入变量o
	 		FETCH ordernumbers INTO o;

	 		-- 执行计算是否的带税的订单总价的存储过程 （IN,IN,OUT 某个订单的总价）  具体代码看上一章
	 		CALL ordertotal(o,1,t);

	 		-- 插入结果表中
	 		INSERT INTO ordertotals(order_num,order_total)
	 		VALUES (o,t);

	 	-- 结束循环	
	 	UNTILE done END REPEAT;

	 	-- 关闭游标
	 	CLOSE ordernumbers;
	 END;

	 //执行
	 CALL processorders();
	 //查看结果表
	 SELECT * FROM ordertotals;

触发器
    定义：MySQL响应任意DELETE/INSERT/UPDATE语句而自动执行的一条MySQL语句（或位于BEGIN和END语句之间的一组语句）
    
    注意点：
    与其他DBMS相比， MySQL 5中支持的触发器相当初级。未来的MySQL版本中有一些改进和增强触发器支持的计划。

    触发器名必须在每个表中唯一，但不是在每个数据库中唯一。现在最好是在数据库范围内使用唯一的触发器名。
    每个表最多支持6个触发器（每条INSERT、 UPDATE和DELETE的之前和之后）。
    单一触发器不能与多个事件或多个表关联。
    
  创建触发器可能需要特殊的安全访问权限，但是，触发器的执行是自动的。
	如果INSERT、 UPDATE或DELETE语句能够执行，则相关的触发器也能执行。
	BEFORE触发器或语句本身失败， MySQL将不执行AFTER触发器（如果有的话）。
  
	应该用触发器来保证数据的一致性（大小写、格式等）。
    在触发器中执行这种类型的处理的优点是它总是进行这种处理，而且是透明地进行，与客户机应用无关。
  
	触发器的一种非常有意义的使用是创建审计跟踪。
    使用触发器，把更改（如果需要，甚至还有之前和之后的状态）记录到另一个表非常容易。
 	
	触发器仅支持表，不支持视图和临时表。
	MySQL触发器中不支持CALL语句。这表示不能从触发器内调用存储过程。所需的存储过程代码需要复制到触发器内。


    1.创建触发器
		在创建触发器时，需要给出4条信息：
		唯一的触发器名；
		触发器关联的表；
		触发器应该响应的活动（DELETE、 INSERT或UPDATE）；
		触发器何时执行（处理之前或之后）。
	  通常，将BEFORE用于数据验证和净化（目的是保证插入表中的数据确实是需要的数据）
	  CREATE TRIGGER 触发器名 [BEFORE | AFTER] [INSERT | UPDATE |DELETE] ON 表名
	  FOR EACH ROW 触发处理语句;

	 2.删除触发器
	 	触发器不能更新或覆盖。为了修改一个触发器，必须先删除它，然后再重新创建。
	 	DROP TRIGGER newproduct;

	 3.触发器类型
	   1.INSERT触发器
		
		在INSERT触发器代码内，可引用一个名为NEW的虚拟表，访问被插入的行；
		在BEFORE INSERT触发器中， NEW中的值也可以被更新（允许更改被插入的值）；
		对于AUTO_INCREMENT列， NEW在INSERT执行之前包含0，在INSERT执行之后包含新的自动生成值。	 

		获取（返回）新的自动生成的订单号：
		CREATE TRIGGER neworder AFTER INSERT ON orders
	    FOR EACH ROW SELECT NEW.order_num;

	    此触发器必须按照AFTER INSERT执行，因为在BEFOREINSERT语句执行之前，新order_num还没有生成。

	    //测试这个触发器
	    INSERT INTO orders(order_date,cust_id)
	    VALUES (NOW(),10001);
	    返回order_num 20010 自增的结果

	   2.DELETE触发器

	     在DELETE触发器代码内，你可以引用一个名为OLD的虚拟表，访问被删除的行；
	     OLD中的值全都是只读的，不能更新。

	     使用OLD保存将要被删除的行到一个存档表中：
	     CREATE TRIGGER deleteorder BEFORE DELETE ON orders
	     FOR EACH ROW
	     BEGIN
	        INSERT INTO ahchive_orders(order_num,order_date,cust_id)
	        VALUES(OLD.order_num,OLD.order_date,OLD.cust_id)
	     END;

	     BEGIN和END语句标记触发器体:容纳多条SQL语句（在BEGIN END块中一条挨着一条）

	   3.UPDATE触发器

	   	 在UPDATE触发器代码中，可引用一个名为OLD的虚拟表访问以前（UPDATE语句前）的值，OLD中的值全都是只读的，不能更新；
 		 引用一个名为NEW的虚拟表访问新更新的值，
		 在BEFORE UPDATE触发器中， NEW中的值可能也被更新（允许更改将要用于UPDATE语句中的值）；

		 保证更新的某字段总是大写：
		 CREATE TRIGGER deleteorder BEFORE UPDATE ON vendors
		 FOR EACH ROW SET NEW.vend_state = Upper(NEW.vend_state);

事务处理
    MyISAM和InnoDB，前者不支持明确的事务处理管理，而后者支持。
    
    事务处理（transaction processing）可以用来维护数据库的完整性，
    它保证成批的MySQL操作要么完全执行，要么完全不执行。



	管理事务处理的关键：
			将SQL语句组分解为逻辑块，并明确规定数据何时应该回退，何时不应该回退。

	只是对简单的事务处理才能这样做（直接使用COMMIT和ROLLBACK），更复杂的事务处理可能需要部分提交或回退。

	案例：添加订单事务处理过程
	(1) 检查数据库中是否存在相应的客户，如果不存在，添加他/她。
	(2) 提交客户信息。

	(3) 检索客户的ID。
	(4) 添加一行到orders表。
	(5) 如果在添加行到orders表时出现故障，回退。

	(6) 检索orders表中赋予的新订单ID。
	(7) 对于订购的每项物品，添加新行到orderitems表。
	(8) 如果在添加新行到orderitems时出现故障，回退所有添加的orderitems行和orders行。
	
	(9) 提交订单信息。

	部分提交或回退：
	如果发生错误，只需要返回到添加orders行之前即可，不需要回退到customers表（如果存在的话）。

	为了支持回退部分事务处理，必须能在事务处理块中合适的位置放置占位符。
	这样，如果需要回退，可以回退到某个占位符。
	这些占位符称为保留点。

	设置任意多的保留点，越多越好,能灵活地进行回退。

	

												更改MySQL默认的自动提交行为：SET autocommit = 0;
    											autocommit标志是针对每个连接而不是服务器的。
    事务（transaction）指一组/批SQL语句；                               START TRANSACTION; 开启事务
    											当COMMIT或ROLLBACK语句执行后，事务会自动关闭（将来的更改会隐含提交）。
  回退（rollback）指撤销指定SQL语句的过程；							ROLLBACK;
  提交（commit）指将未存储的SQL语句结果写入数据库表；					COMMIT;
  保留点（savepoint）指事务处理中设置的临时占位符（placeholder），你可以对它发布回退（与回退整个事务处理不同）。
 													创建保留点：
														SAVEPOINT 保留点名;
													回退到指定给出的保留点：
														ROLLBACK TO 保留点名;
													释放保留点：
														保留点在事务处理完成（执行一条ROLLBACK或COMMIT）后自动释放。
														RELEASE SAVEPOINT 保留名;  显式释放


全球化和本地化
	字符集为字母和符号的集合；
	编码为某个字符集成员的内部表示；
	校对为规定字符如何比较的指令。

	查看所支持的字符集完整列表：SELECT CHARACTER SET;
	查看所支持校对的完整列表:SELECT COLLATION;

	查看系统的字符集和校对：
	SHOW VARIABLES LIKE '%character%';
	SHOW VARIABLES LIKE '%collation%';

	如果指定CHARACTER SET和COLLATE两者，则使用这些值。
 	如果只指定CHARACTER SET，则使用此字符集及其默认的校对（如SHOW CHARACTER SET的结果中所示）。
 	如果既不指定CHARACTER SET，也不指定COLLATE，则使用数据库默认。

	给表指定字符集和校对:
	CREATE TABLE 表名(
		列声明
	) DEFAULT CHARACTER SET 字符集
	  COLLATION 校对;

	给列指定字符集和校对:
	CREATE TABLE 表名(
		column1 VARCHAR(10) CHARACTER SET 字符集 COLLATION 校对,
		列声明
	) DEFAULT CHARACTER SET 字符集
	  COLLATION 校对;

	校对在对用ORDER BY子句检索出来的数据排序时起重要的作用
	如果你需要用与创建表时不同的校对顺序排序特定的SELECT语句，可以在SELECT语句自身中进行:
	SELECT * FROM customers
	ORDER BY lastname,firstname COLLATION latin1_general_cs; //为区分大小写的校对

	如果绝对需要，串可以在字符集之间进行转换。
	为此，使用Cast()或Convert()函数。
	CAST(expression AS TYPE);将任何类型的值转换为指定类型
	CAST()也可以转化字符集，并且同时强制改变数据类型：CAST(串 AS 指定数据类型 CHARACTER SET 指定字符集);

	CONVERT (数据类型[(length)], 表达式或列名 [, 样式]) ;
	CONVERT(字符串 USING 字符集);

	ORDER BY CONVERT(列名 USING GBK)  根据汉字首字母排序

安全管理
	1.访问控制
	 可能有的情况：
	  多数用户只需要对表进行读和写，但少数用户甚至需要能创建和删除表；
 	  某些用户需要读表，但可能不需要更新表；
    你可能想允许用户添加数据，但不允许他们删除数据；
    某些用户（管理员）可能需要处理用户账号的权限，但多数用户不需要；
    你可能想让用户通过存储过程访问数据，但不允许他们直接访问数据；
    你可能想根据用户登录的地点限制对某些功能的访问。
     
     日常工作中，决不能使用root。应该创建一系列的账号，有的用于管理，有的供用户使用，有的供开发人员使用，等等。

     访问控制是为了保证用户不能执行他们不应该执行的语句
    2.管理用户
      所有用户账号列表：USE mysql;
                        SELECT user FROM user;
      创建用户账号: CREATE USER 用户名 IDENTIFIED BY '密码';
      重命名用户：RENAME USER 旧 TO 新;
      更改口令（密码）：SET PASSWORD [FOR 用户名] = Password('密码'); //不加用户名是改当前用户，Password()函数为了加密

      删除用户账号 以及相关的权限：DROP USER 用户名;
      
      查看用户访问权限：SHOW GRANTS FOR 用户;  
      USAGE ON *.*  TO '用户'@'%'     
      1.USAGE ON *.* : USAGE表示根本没有权限
      2.用户定义为user@host 
      	MySQL的权限用用户名和主机名结合定义。如果不指定主机名，则使用默认的主机名%（授予用户访问权限而不管主机名）。

      为设置权限，使用GRANT语句。 GRANT要求你至少给出以下信息：
	 要授予的权限；
	 被授予访问权限的数据库或表；
	 用户名。
	  GRAND 权限[,权限] ON 数据库名.* TO 用户 [WITH GRANT OPTION:该用户可以转授其他用户该权限];
	  允许用户在数据库的所有表上使用某权限（数据库的所有表的某权限授予该用户）。	

	  GRANT的反操作为REVOKE，用它来撤销特定的权限：					    				 
	  REVOKE 权限[,权限]  ON 数据库名.* FROM 用户;
	  被撤销的访问权限必须存在，否则会出错。

	  GRANT和REVOKE可在几个层次上控制访问权限：
	 整个服务器，使用GRANT ALL和REVOKE ALL；
	（数据库或表不存在时也可以设置，好处可提前设置，坏处删除原先的建立同名新库或表，原先的权限还在，如果没撤销的话）
	   整个数据库，使用ON database.*；
	 特定的表，使用ON database.table；
	 特定的列；
	 特定的存储过程。


权 限 说 明
ALL 除GRANT OPTION外的所有权限
ALTER 使用ALTER TABLE
ALTER ROUTINE 使用ALTER PROCEDURE和DROP PROCEDURE
CREATE 使用CREATE TABLE
CREATE ROUTINE 使用CREATE PROCEDURE
CREATE TEMPORARY
TABLES 使用CREATE TEMPORARY TABLE
CREATE USER 使用CREATE USER、 DROP USER、 RENAME USER和REVOKEALL PRIVILEGES
CREATE VIEW 使用CREATE VIEW
DELETE 使用DELETE
DROP 使用DROP TABLE
EXECUTE 使用CALL和存储过程
FILE 使用SELECT INTO OUTFILE和LOAD DATA INFILE
GRANT OPTION 使用GRANT和REVOKE
INDEX 使用CREATE INDEX和DROP INDEX
INSERT 使用INSERT
LOCK TABLES 使用LOCK TABLES
PROCESS 使用SHOW FULL PROCESSLIST
RELOAD 使用FLUSH
REPLICATION CLIENT 服务器位置的访问
REPLICATION SLAVE 由复制从属使用
SELECT 使用SELECT
SHOW DATABASES 使用SHOW DATABASES
SHOW VIEW 使用SHOW CREATE VIEW
SHUTDOWN 使用mysqladmin shutdown（用来关闭MySQL）
SUPER 使用CHANGE MASTER、 KILL、 LOGS、 PURGE、 MASTER
和SET GLOBAL。还允许mysqladmin调试登录
UPDATE 使用UPDATE
USAGE 无访问权限